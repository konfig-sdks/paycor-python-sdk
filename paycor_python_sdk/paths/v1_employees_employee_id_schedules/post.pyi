# coding: utf-8

"""
    Paycor Public API

     Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from paycor_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from paycor_python_sdk.api_response import AsyncGeneratorResponse
from paycor_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paycor_python_sdk import schemas  # noqa: F401

from paycor_python_sdk.model.schedule2 import Schedule2 as Schedule2Schema
from paycor_python_sdk.model.create_or_update_response import CreateOrUpdateResponse as CreateOrUpdateResponseSchema
from paycor_python_sdk.model.paycor_error import PaycorError as PaycorErrorSchema

from paycor_python_sdk.type.create_or_update_response import CreateOrUpdateResponse
from paycor_python_sdk.type.paycor_error import PaycorError
from paycor_python_sdk.type.schedule2 import Schedule2

from ...api_client import Dictionary
from paycor_python_sdk.pydantic.schedule2 import Schedule2 as Schedule2Pydantic
from paycor_python_sdk.pydantic.create_or_update_response import CreateOrUpdateResponse as CreateOrUpdateResponsePydantic
from paycor_python_sdk.pydantic.paycor_error import PaycorError as PaycorErrorPydantic

# Path params
EmployeeIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'employeeId': typing.Union[EmployeeIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_employee_id = api_client.PathParameter(
    name="employeeId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=EmployeeIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = Schedule2Schema


request_body_schedule2 = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor201ResponseBodyApplicationJson = CreateOrUpdateResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: CreateOrUpdateResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: CreateOrUpdateResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = PaycorErrorSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: PaycorError


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: PaycorError


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = PaycorErrorSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: PaycorError


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: PaycorError


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _add_to_employee_mapped_args(
        self,
        employee_id: str,
        start_date_time: typing.Optional[datetime] = None,
        end_date_time: typing.Optional[datetime] = None,
        before_start_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        after_end_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        label: typing.Optional[typing.Optional[str]] = None,
        shift_depeartment_id: typing.Optional[typing.Optional[str]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if start_date_time is not None:
            _body["StartDateTime"] = start_date_time
        if end_date_time is not None:
            _body["EndDateTime"] = end_date_time
        if before_start_time_in_minutes is not None:
            _body["BeforeStartTimeInMinutes"] = before_start_time_in_minutes
        if after_end_time_in_minutes is not None:
            _body["AfterEndTimeInMinutes"] = after_end_time_in_minutes
        if label is not None:
            _body["Label"] = label
        if shift_depeartment_id is not None:
            _body["ShiftDepeartmentId"] = shift_depeartment_id
        args.body = _body
        if employee_id is not None:
            _path_params["employeeId"] = employee_id
        args.path = _path_params
        return args

    async def _aadd_to_employee_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Add Schedule to Employee
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_employee_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/employees/{employeeId}/schedules',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_schedule2.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _add_to_employee_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Add Schedule to Employee
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_employee_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/employees/{employeeId}/schedules',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_schedule2.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class AddToEmployeeRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aadd_to_employee(
        self,
        employee_id: str,
        start_date_time: typing.Optional[datetime] = None,
        end_date_time: typing.Optional[datetime] = None,
        before_start_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        after_end_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        label: typing.Optional[typing.Optional[str]] = None,
        shift_depeartment_id: typing.Optional[typing.Optional[str]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._add_to_employee_mapped_args(
            employee_id=employee_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            before_start_time_in_minutes=before_start_time_in_minutes,
            after_end_time_in_minutes=after_end_time_in_minutes,
            label=label,
            shift_depeartment_id=shift_depeartment_id,
        )
        return await self._aadd_to_employee_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def add_to_employee(
        self,
        employee_id: str,
        start_date_time: typing.Optional[datetime] = None,
        end_date_time: typing.Optional[datetime] = None,
        before_start_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        after_end_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        label: typing.Optional[typing.Optional[str]] = None,
        shift_depeartment_id: typing.Optional[typing.Optional[str]] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._add_to_employee_mapped_args(
            employee_id=employee_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            before_start_time_in_minutes=before_start_time_in_minutes,
            after_end_time_in_minutes=after_end_time_in_minutes,
            label=label,
            shift_depeartment_id=shift_depeartment_id,
        )
        return self._add_to_employee_oapg(
            body=args.body,
            path_params=args.path,
        )

class AddToEmployee(BaseApi):

    async def aadd_to_employee(
        self,
        employee_id: str,
        start_date_time: typing.Optional[datetime] = None,
        end_date_time: typing.Optional[datetime] = None,
        before_start_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        after_end_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        label: typing.Optional[typing.Optional[str]] = None,
        shift_depeartment_id: typing.Optional[typing.Optional[str]] = None,
        validate: bool = False,
        **kwargs,
    ) -> CreateOrUpdateResponsePydantic:
        raw_response = await self.raw.aadd_to_employee(
            employee_id=employee_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            before_start_time_in_minutes=before_start_time_in_minutes,
            after_end_time_in_minutes=after_end_time_in_minutes,
            label=label,
            shift_depeartment_id=shift_depeartment_id,
            **kwargs,
        )
        if validate:
            return CreateOrUpdateResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(CreateOrUpdateResponsePydantic, raw_response.body)
    
    
    def add_to_employee(
        self,
        employee_id: str,
        start_date_time: typing.Optional[datetime] = None,
        end_date_time: typing.Optional[datetime] = None,
        before_start_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        after_end_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        label: typing.Optional[typing.Optional[str]] = None,
        shift_depeartment_id: typing.Optional[typing.Optional[str]] = None,
        validate: bool = False,
    ) -> CreateOrUpdateResponsePydantic:
        raw_response = self.raw.add_to_employee(
            employee_id=employee_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            before_start_time_in_minutes=before_start_time_in_minutes,
            after_end_time_in_minutes=after_end_time_in_minutes,
            label=label,
            shift_depeartment_id=shift_depeartment_id,
        )
        if validate:
            return CreateOrUpdateResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(CreateOrUpdateResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        employee_id: str,
        start_date_time: typing.Optional[datetime] = None,
        end_date_time: typing.Optional[datetime] = None,
        before_start_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        after_end_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        label: typing.Optional[typing.Optional[str]] = None,
        shift_depeartment_id: typing.Optional[typing.Optional[str]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._add_to_employee_mapped_args(
            employee_id=employee_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            before_start_time_in_minutes=before_start_time_in_minutes,
            after_end_time_in_minutes=after_end_time_in_minutes,
            label=label,
            shift_depeartment_id=shift_depeartment_id,
        )
        return await self._aadd_to_employee_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        employee_id: str,
        start_date_time: typing.Optional[datetime] = None,
        end_date_time: typing.Optional[datetime] = None,
        before_start_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        after_end_time_in_minutes: typing.Optional[typing.Optional[int]] = None,
        label: typing.Optional[typing.Optional[str]] = None,
        shift_depeartment_id: typing.Optional[typing.Optional[str]] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._add_to_employee_mapped_args(
            employee_id=employee_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            before_start_time_in_minutes=before_start_time_in_minutes,
            after_end_time_in_minutes=after_end_time_in_minutes,
            label=label,
            shift_depeartment_id=shift_depeartment_id,
        )
        return self._add_to_employee_oapg(
            body=args.body,
            path_params=args.path,
        )

