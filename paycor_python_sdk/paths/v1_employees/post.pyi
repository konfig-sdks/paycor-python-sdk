# coding: utf-8

"""
    Paycor Public API

     Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from paycor_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from paycor_python_sdk.api_response import AsyncGeneratorResponse
from paycor_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paycor_python_sdk import schemas  # noqa: F401

from paycor_python_sdk.model.employee2 import Employee2 as Employee2Schema
from paycor_python_sdk.model.flsa_type import FlsaType as FlsaTypeSchema
from paycor_python_sdk.model.create_or_update_response import CreateOrUpdateResponse as CreateOrUpdateResponseSchema
from paycor_python_sdk.model.phone import Phone as PhoneSchema
from paycor_python_sdk.model.prefix import Prefix as PrefixSchema
from paycor_python_sdk.model.generic_address import GenericAddress as GenericAddressSchema
from paycor_python_sdk.model.veteran_status import VeteranStatus as VeteranStatusSchema
from paycor_python_sdk.model.marital_status import MaritalStatus as MaritalStatusSchema
from paycor_python_sdk.model.disability_status import DisabilityStatus as DisabilityStatusSchema
from paycor_python_sdk.model.employment_type import EmploymentType as EmploymentTypeSchema
from paycor_python_sdk.model.ethnicity_type import EthnicityType as EthnicityTypeSchema
from paycor_python_sdk.model.paycor_error import PaycorError as PaycorErrorSchema
from paycor_python_sdk.model.gender import Gender as GenderSchema
from paycor_python_sdk.model.employment_status import EmploymentStatus as EmploymentStatusSchema
from paycor_python_sdk.model.suffix import Suffix as SuffixSchema

from paycor_python_sdk.type.disability_status import DisabilityStatus
from paycor_python_sdk.type.suffix import Suffix
from paycor_python_sdk.type.prefix import Prefix
from paycor_python_sdk.type.employment_status import EmploymentStatus
from paycor_python_sdk.type.gender import Gender
from paycor_python_sdk.type.marital_status import MaritalStatus
from paycor_python_sdk.type.ethnicity_type import EthnicityType
from paycor_python_sdk.type.generic_address import GenericAddress
from paycor_python_sdk.type.phone import Phone
from paycor_python_sdk.type.flsa_type import FlsaType
from paycor_python_sdk.type.employee2 import Employee2
from paycor_python_sdk.type.employment_type import EmploymentType
from paycor_python_sdk.type.create_or_update_response import CreateOrUpdateResponse
from paycor_python_sdk.type.paycor_error import PaycorError
from paycor_python_sdk.type.veteran_status import VeteranStatus

from ...api_client import Dictionary
from paycor_python_sdk.pydantic.employment_type import EmploymentType as EmploymentTypePydantic
from paycor_python_sdk.pydantic.disability_status import DisabilityStatus as DisabilityStatusPydantic
from paycor_python_sdk.pydantic.employment_status import EmploymentStatus as EmploymentStatusPydantic
from paycor_python_sdk.pydantic.ethnicity_type import EthnicityType as EthnicityTypePydantic
from paycor_python_sdk.pydantic.generic_address import GenericAddress as GenericAddressPydantic
from paycor_python_sdk.pydantic.employee2 import Employee2 as Employee2Pydantic
from paycor_python_sdk.pydantic.phone import Phone as PhonePydantic
from paycor_python_sdk.pydantic.flsa_type import FlsaType as FlsaTypePydantic
from paycor_python_sdk.pydantic.gender import Gender as GenderPydantic
from paycor_python_sdk.pydantic.marital_status import MaritalStatus as MaritalStatusPydantic
from paycor_python_sdk.pydantic.create_or_update_response import CreateOrUpdateResponse as CreateOrUpdateResponsePydantic
from paycor_python_sdk.pydantic.paycor_error import PaycorError as PaycorErrorPydantic
from paycor_python_sdk.pydantic.prefix import Prefix as PrefixPydantic
from paycor_python_sdk.pydantic.suffix import Suffix as SuffixPydantic
from paycor_python_sdk.pydantic.veteran_status import VeteranStatus as VeteranStatusPydantic

# body param
SchemaForRequestBodyApplicationJson = Employee2Schema


request_body_employee2 = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor201ResponseBodyApplicationJson = CreateOrUpdateResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: CreateOrUpdateResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: CreateOrUpdateResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = PaycorErrorSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: PaycorError


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: PaycorError


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = PaycorErrorSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: PaycorError


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: PaycorError


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_new_employee_mapped_args(
        self,
        legal_entity_id: int,
        first_name: str,
        last_name: str,
        hire_date: datetime,
        status: EmploymentStatus,
        paygroup_description: str,
        department_code: int,
        primary_address: GenericAddress,
        employee_number: typing.Optional[typing.Optional[int]] = None,
        alternate_employee_number: typing.Optional[typing.Optional[str]] = None,
        prefix: typing.Optional[Prefix] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        suffix: typing.Optional[Suffix] = None,
        home_email: typing.Optional[typing.Optional[str]] = None,
        work_email: typing.Optional[typing.Optional[str]] = None,
        phones: typing.Optional[typing.Optional[typing.List[Phone]]] = None,
        social_security_number: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[datetime]] = None,
        gender: typing.Optional[Gender] = None,
        ethnicity: typing.Optional[EthnicityType] = None,
        marital_status: typing.Optional[MaritalStatus] = None,
        work_location: typing.Optional[typing.Optional[str]] = None,
        job_title: typing.Optional[typing.Optional[str]] = None,
        re_hire_date: typing.Optional[typing.Optional[datetime]] = None,
        flsa: typing.Optional[FlsaType] = None,
        type: typing.Optional[EmploymentType] = None,
        manager_emp_id: typing.Optional[typing.Optional[str]] = None,
        veteran: typing.Optional[VeteranStatus] = None,
        disability: typing.Optional[DisabilityStatus] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if legal_entity_id is not None:
            _body["LegalEntityId"] = legal_entity_id
        if employee_number is not None:
            _body["EmployeeNumber"] = employee_number
        if alternate_employee_number is not None:
            _body["AlternateEmployeeNumber"] = alternate_employee_number
        if prefix is not None:
            _body["Prefix"] = prefix
        if first_name is not None:
            _body["FirstName"] = first_name
        if middle_name is not None:
            _body["MiddleName"] = middle_name
        if last_name is not None:
            _body["LastName"] = last_name
        if suffix is not None:
            _body["Suffix"] = suffix
        if home_email is not None:
            _body["HomeEmail"] = home_email
        if work_email is not None:
            _body["WorkEmail"] = work_email
        if phones is not None:
            _body["Phones"] = phones
        if social_security_number is not None:
            _body["SocialSecurityNumber"] = social_security_number
        if birth_date is not None:
            _body["BirthDate"] = birth_date
        if gender is not None:
            _body["Gender"] = gender
        if ethnicity is not None:
            _body["Ethnicity"] = ethnicity
        if marital_status is not None:
            _body["MaritalStatus"] = marital_status
        if work_location is not None:
            _body["WorkLocation"] = work_location
        if job_title is not None:
            _body["JobTitle"] = job_title
        if hire_date is not None:
            _body["HireDate"] = hire_date
        if re_hire_date is not None:
            _body["ReHireDate"] = re_hire_date
        if status is not None:
            _body["Status"] = status
        if flsa is not None:
            _body["Flsa"] = flsa
        if type is not None:
            _body["Type"] = type
        if manager_emp_id is not None:
            _body["ManagerEmpId"] = manager_emp_id
        if paygroup_description is not None:
            _body["PaygroupDescription"] = paygroup_description
        if department_code is not None:
            _body["DepartmentCode"] = department_code
        if veteran is not None:
            _body["Veteran"] = veteran
        if disability is not None:
            _body["Disability"] = disability
        if primary_address is not None:
            _body["PrimaryAddress"] = primary_address
        args.body = _body
        return args

    async def _acreate_new_employee_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create Employee
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/employees',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_employee2.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_new_employee_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create Employee
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/employees',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_employee2.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateNewEmployeeRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_new_employee(
        self,
        legal_entity_id: int,
        first_name: str,
        last_name: str,
        hire_date: datetime,
        status: EmploymentStatus,
        paygroup_description: str,
        department_code: int,
        primary_address: GenericAddress,
        employee_number: typing.Optional[typing.Optional[int]] = None,
        alternate_employee_number: typing.Optional[typing.Optional[str]] = None,
        prefix: typing.Optional[Prefix] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        suffix: typing.Optional[Suffix] = None,
        home_email: typing.Optional[typing.Optional[str]] = None,
        work_email: typing.Optional[typing.Optional[str]] = None,
        phones: typing.Optional[typing.Optional[typing.List[Phone]]] = None,
        social_security_number: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[datetime]] = None,
        gender: typing.Optional[Gender] = None,
        ethnicity: typing.Optional[EthnicityType] = None,
        marital_status: typing.Optional[MaritalStatus] = None,
        work_location: typing.Optional[typing.Optional[str]] = None,
        job_title: typing.Optional[typing.Optional[str]] = None,
        re_hire_date: typing.Optional[typing.Optional[datetime]] = None,
        flsa: typing.Optional[FlsaType] = None,
        type: typing.Optional[EmploymentType] = None,
        manager_emp_id: typing.Optional[typing.Optional[str]] = None,
        veteran: typing.Optional[VeteranStatus] = None,
        disability: typing.Optional[DisabilityStatus] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_employee_mapped_args(
            legal_entity_id=legal_entity_id,
            first_name=first_name,
            last_name=last_name,
            hire_date=hire_date,
            status=status,
            paygroup_description=paygroup_description,
            department_code=department_code,
            primary_address=primary_address,
            employee_number=employee_number,
            alternate_employee_number=alternate_employee_number,
            prefix=prefix,
            middle_name=middle_name,
            suffix=suffix,
            home_email=home_email,
            work_email=work_email,
            phones=phones,
            social_security_number=social_security_number,
            birth_date=birth_date,
            gender=gender,
            ethnicity=ethnicity,
            marital_status=marital_status,
            work_location=work_location,
            job_title=job_title,
            re_hire_date=re_hire_date,
            flsa=flsa,
            type=type,
            manager_emp_id=manager_emp_id,
            veteran=veteran,
            disability=disability,
        )
        return await self._acreate_new_employee_oapg(
            body=args.body,
            **kwargs,
        )
    
    def create_new_employee(
        self,
        legal_entity_id: int,
        first_name: str,
        last_name: str,
        hire_date: datetime,
        status: EmploymentStatus,
        paygroup_description: str,
        department_code: int,
        primary_address: GenericAddress,
        employee_number: typing.Optional[typing.Optional[int]] = None,
        alternate_employee_number: typing.Optional[typing.Optional[str]] = None,
        prefix: typing.Optional[Prefix] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        suffix: typing.Optional[Suffix] = None,
        home_email: typing.Optional[typing.Optional[str]] = None,
        work_email: typing.Optional[typing.Optional[str]] = None,
        phones: typing.Optional[typing.Optional[typing.List[Phone]]] = None,
        social_security_number: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[datetime]] = None,
        gender: typing.Optional[Gender] = None,
        ethnicity: typing.Optional[EthnicityType] = None,
        marital_status: typing.Optional[MaritalStatus] = None,
        work_location: typing.Optional[typing.Optional[str]] = None,
        job_title: typing.Optional[typing.Optional[str]] = None,
        re_hire_date: typing.Optional[typing.Optional[datetime]] = None,
        flsa: typing.Optional[FlsaType] = None,
        type: typing.Optional[EmploymentType] = None,
        manager_emp_id: typing.Optional[typing.Optional[str]] = None,
        veteran: typing.Optional[VeteranStatus] = None,
        disability: typing.Optional[DisabilityStatus] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_employee_mapped_args(
            legal_entity_id=legal_entity_id,
            first_name=first_name,
            last_name=last_name,
            hire_date=hire_date,
            status=status,
            paygroup_description=paygroup_description,
            department_code=department_code,
            primary_address=primary_address,
            employee_number=employee_number,
            alternate_employee_number=alternate_employee_number,
            prefix=prefix,
            middle_name=middle_name,
            suffix=suffix,
            home_email=home_email,
            work_email=work_email,
            phones=phones,
            social_security_number=social_security_number,
            birth_date=birth_date,
            gender=gender,
            ethnicity=ethnicity,
            marital_status=marital_status,
            work_location=work_location,
            job_title=job_title,
            re_hire_date=re_hire_date,
            flsa=flsa,
            type=type,
            manager_emp_id=manager_emp_id,
            veteran=veteran,
            disability=disability,
        )
        return self._create_new_employee_oapg(
            body=args.body,
        )

class CreateNewEmployee(BaseApi):

    async def acreate_new_employee(
        self,
        legal_entity_id: int,
        first_name: str,
        last_name: str,
        hire_date: datetime,
        status: EmploymentStatus,
        paygroup_description: str,
        department_code: int,
        primary_address: GenericAddress,
        employee_number: typing.Optional[typing.Optional[int]] = None,
        alternate_employee_number: typing.Optional[typing.Optional[str]] = None,
        prefix: typing.Optional[Prefix] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        suffix: typing.Optional[Suffix] = None,
        home_email: typing.Optional[typing.Optional[str]] = None,
        work_email: typing.Optional[typing.Optional[str]] = None,
        phones: typing.Optional[typing.Optional[typing.List[Phone]]] = None,
        social_security_number: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[datetime]] = None,
        gender: typing.Optional[Gender] = None,
        ethnicity: typing.Optional[EthnicityType] = None,
        marital_status: typing.Optional[MaritalStatus] = None,
        work_location: typing.Optional[typing.Optional[str]] = None,
        job_title: typing.Optional[typing.Optional[str]] = None,
        re_hire_date: typing.Optional[typing.Optional[datetime]] = None,
        flsa: typing.Optional[FlsaType] = None,
        type: typing.Optional[EmploymentType] = None,
        manager_emp_id: typing.Optional[typing.Optional[str]] = None,
        veteran: typing.Optional[VeteranStatus] = None,
        disability: typing.Optional[DisabilityStatus] = None,
        validate: bool = False,
        **kwargs,
    ) -> CreateOrUpdateResponsePydantic:
        raw_response = await self.raw.acreate_new_employee(
            legal_entity_id=legal_entity_id,
            first_name=first_name,
            last_name=last_name,
            hire_date=hire_date,
            status=status,
            paygroup_description=paygroup_description,
            department_code=department_code,
            primary_address=primary_address,
            employee_number=employee_number,
            alternate_employee_number=alternate_employee_number,
            prefix=prefix,
            middle_name=middle_name,
            suffix=suffix,
            home_email=home_email,
            work_email=work_email,
            phones=phones,
            social_security_number=social_security_number,
            birth_date=birth_date,
            gender=gender,
            ethnicity=ethnicity,
            marital_status=marital_status,
            work_location=work_location,
            job_title=job_title,
            re_hire_date=re_hire_date,
            flsa=flsa,
            type=type,
            manager_emp_id=manager_emp_id,
            veteran=veteran,
            disability=disability,
            **kwargs,
        )
        if validate:
            return CreateOrUpdateResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(CreateOrUpdateResponsePydantic, raw_response.body)
    
    
    def create_new_employee(
        self,
        legal_entity_id: int,
        first_name: str,
        last_name: str,
        hire_date: datetime,
        status: EmploymentStatus,
        paygroup_description: str,
        department_code: int,
        primary_address: GenericAddress,
        employee_number: typing.Optional[typing.Optional[int]] = None,
        alternate_employee_number: typing.Optional[typing.Optional[str]] = None,
        prefix: typing.Optional[Prefix] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        suffix: typing.Optional[Suffix] = None,
        home_email: typing.Optional[typing.Optional[str]] = None,
        work_email: typing.Optional[typing.Optional[str]] = None,
        phones: typing.Optional[typing.Optional[typing.List[Phone]]] = None,
        social_security_number: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[datetime]] = None,
        gender: typing.Optional[Gender] = None,
        ethnicity: typing.Optional[EthnicityType] = None,
        marital_status: typing.Optional[MaritalStatus] = None,
        work_location: typing.Optional[typing.Optional[str]] = None,
        job_title: typing.Optional[typing.Optional[str]] = None,
        re_hire_date: typing.Optional[typing.Optional[datetime]] = None,
        flsa: typing.Optional[FlsaType] = None,
        type: typing.Optional[EmploymentType] = None,
        manager_emp_id: typing.Optional[typing.Optional[str]] = None,
        veteran: typing.Optional[VeteranStatus] = None,
        disability: typing.Optional[DisabilityStatus] = None,
        validate: bool = False,
    ) -> CreateOrUpdateResponsePydantic:
        raw_response = self.raw.create_new_employee(
            legal_entity_id=legal_entity_id,
            first_name=first_name,
            last_name=last_name,
            hire_date=hire_date,
            status=status,
            paygroup_description=paygroup_description,
            department_code=department_code,
            primary_address=primary_address,
            employee_number=employee_number,
            alternate_employee_number=alternate_employee_number,
            prefix=prefix,
            middle_name=middle_name,
            suffix=suffix,
            home_email=home_email,
            work_email=work_email,
            phones=phones,
            social_security_number=social_security_number,
            birth_date=birth_date,
            gender=gender,
            ethnicity=ethnicity,
            marital_status=marital_status,
            work_location=work_location,
            job_title=job_title,
            re_hire_date=re_hire_date,
            flsa=flsa,
            type=type,
            manager_emp_id=manager_emp_id,
            veteran=veteran,
            disability=disability,
        )
        if validate:
            return CreateOrUpdateResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(CreateOrUpdateResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        legal_entity_id: int,
        first_name: str,
        last_name: str,
        hire_date: datetime,
        status: EmploymentStatus,
        paygroup_description: str,
        department_code: int,
        primary_address: GenericAddress,
        employee_number: typing.Optional[typing.Optional[int]] = None,
        alternate_employee_number: typing.Optional[typing.Optional[str]] = None,
        prefix: typing.Optional[Prefix] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        suffix: typing.Optional[Suffix] = None,
        home_email: typing.Optional[typing.Optional[str]] = None,
        work_email: typing.Optional[typing.Optional[str]] = None,
        phones: typing.Optional[typing.Optional[typing.List[Phone]]] = None,
        social_security_number: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[datetime]] = None,
        gender: typing.Optional[Gender] = None,
        ethnicity: typing.Optional[EthnicityType] = None,
        marital_status: typing.Optional[MaritalStatus] = None,
        work_location: typing.Optional[typing.Optional[str]] = None,
        job_title: typing.Optional[typing.Optional[str]] = None,
        re_hire_date: typing.Optional[typing.Optional[datetime]] = None,
        flsa: typing.Optional[FlsaType] = None,
        type: typing.Optional[EmploymentType] = None,
        manager_emp_id: typing.Optional[typing.Optional[str]] = None,
        veteran: typing.Optional[VeteranStatus] = None,
        disability: typing.Optional[DisabilityStatus] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_employee_mapped_args(
            legal_entity_id=legal_entity_id,
            first_name=first_name,
            last_name=last_name,
            hire_date=hire_date,
            status=status,
            paygroup_description=paygroup_description,
            department_code=department_code,
            primary_address=primary_address,
            employee_number=employee_number,
            alternate_employee_number=alternate_employee_number,
            prefix=prefix,
            middle_name=middle_name,
            suffix=suffix,
            home_email=home_email,
            work_email=work_email,
            phones=phones,
            social_security_number=social_security_number,
            birth_date=birth_date,
            gender=gender,
            ethnicity=ethnicity,
            marital_status=marital_status,
            work_location=work_location,
            job_title=job_title,
            re_hire_date=re_hire_date,
            flsa=flsa,
            type=type,
            manager_emp_id=manager_emp_id,
            veteran=veteran,
            disability=disability,
        )
        return await self._acreate_new_employee_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        legal_entity_id: int,
        first_name: str,
        last_name: str,
        hire_date: datetime,
        status: EmploymentStatus,
        paygroup_description: str,
        department_code: int,
        primary_address: GenericAddress,
        employee_number: typing.Optional[typing.Optional[int]] = None,
        alternate_employee_number: typing.Optional[typing.Optional[str]] = None,
        prefix: typing.Optional[Prefix] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        suffix: typing.Optional[Suffix] = None,
        home_email: typing.Optional[typing.Optional[str]] = None,
        work_email: typing.Optional[typing.Optional[str]] = None,
        phones: typing.Optional[typing.Optional[typing.List[Phone]]] = None,
        social_security_number: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[datetime]] = None,
        gender: typing.Optional[Gender] = None,
        ethnicity: typing.Optional[EthnicityType] = None,
        marital_status: typing.Optional[MaritalStatus] = None,
        work_location: typing.Optional[typing.Optional[str]] = None,
        job_title: typing.Optional[typing.Optional[str]] = None,
        re_hire_date: typing.Optional[typing.Optional[datetime]] = None,
        flsa: typing.Optional[FlsaType] = None,
        type: typing.Optional[EmploymentType] = None,
        manager_emp_id: typing.Optional[typing.Optional[str]] = None,
        veteran: typing.Optional[VeteranStatus] = None,
        disability: typing.Optional[DisabilityStatus] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_employee_mapped_args(
            legal_entity_id=legal_entity_id,
            first_name=first_name,
            last_name=last_name,
            hire_date=hire_date,
            status=status,
            paygroup_description=paygroup_description,
            department_code=department_code,
            primary_address=primary_address,
            employee_number=employee_number,
            alternate_employee_number=alternate_employee_number,
            prefix=prefix,
            middle_name=middle_name,
            suffix=suffix,
            home_email=home_email,
            work_email=work_email,
            phones=phones,
            social_security_number=social_security_number,
            birth_date=birth_date,
            gender=gender,
            ethnicity=ethnicity,
            marital_status=marital_status,
            work_location=work_location,
            job_title=job_title,
            re_hire_date=re_hire_date,
            flsa=flsa,
            type=type,
            manager_emp_id=manager_emp_id,
            veteran=veteran,
            disability=disability,
        )
        return self._create_new_employee_oapg(
            body=args.body,
        )

