# coding: utf-8

"""
    Paycor Public API

     Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paycor_python_sdk import schemas  # noqa: F401


class OnDemandPayDeductionInformation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The On Demand Pay Deduction represents Employee level Deduction Information.
Provides link to the associated Employee information.
            
    """


    class MetaOapg:
        
        class properties:
            LegalEntityId = schemas.Int32Schema
            CheckDate = schemas.DateTimeSchema
            PayImportId = schemas.Int32Schema
            EmployeeId = schemas.StrSchema
            EmployeeNumber = schemas.Int32Schema
            
            
            class EmployeeName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'EmployeeName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def EmployeeStatus() -> typing.Type['EmployeeStatusData2']:
                return EmployeeStatusData2
            WasEmployeePaid = schemas.BoolSchema
            ReceivedAmount = schemas.NumberSchema
            PaidAmount = schemas.NumberSchema
            ShortfallAmount = schemas.NumberSchema
            
            
            class PayrunStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PayrunStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            PayrunProcessDate = schemas.DateTimeSchema
            PeriodStartDate = schemas.DateTimeSchema
            PeriodEndDate = schemas.DateTimeSchema
            
            
            class ImpoundProcessDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ImpoundProcessDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ImpoundReferenceId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ImpoundReferenceId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            ImpoundedAmount = schemas.NumberSchema
            IsClientActive = schemas.BoolSchema
            __annotations__ = {
                "LegalEntityId": LegalEntityId,
                "CheckDate": CheckDate,
                "PayImportId": PayImportId,
                "EmployeeId": EmployeeId,
                "EmployeeNumber": EmployeeNumber,
                "EmployeeName": EmployeeName,
                "EmployeeStatus": EmployeeStatus,
                "WasEmployeePaid": WasEmployeePaid,
                "ReceivedAmount": ReceivedAmount,
                "PaidAmount": PaidAmount,
                "ShortfallAmount": ShortfallAmount,
                "PayrunStatus": PayrunStatus,
                "PayrunProcessDate": PayrunProcessDate,
                "PeriodStartDate": PeriodStartDate,
                "PeriodEndDate": PeriodEndDate,
                "ImpoundProcessDate": ImpoundProcessDate,
                "ImpoundReferenceId": ImpoundReferenceId,
                "ImpoundedAmount": ImpoundedAmount,
                "IsClientActive": IsClientActive,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LegalEntityId"]) -> MetaOapg.properties.LegalEntityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CheckDate"]) -> MetaOapg.properties.CheckDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PayImportId"]) -> MetaOapg.properties.PayImportId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmployeeId"]) -> MetaOapg.properties.EmployeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmployeeNumber"]) -> MetaOapg.properties.EmployeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmployeeName"]) -> MetaOapg.properties.EmployeeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmployeeStatus"]) -> 'EmployeeStatusData2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["WasEmployeePaid"]) -> MetaOapg.properties.WasEmployeePaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReceivedAmount"]) -> MetaOapg.properties.ReceivedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaidAmount"]) -> MetaOapg.properties.PaidAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShortfallAmount"]) -> MetaOapg.properties.ShortfallAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PayrunStatus"]) -> MetaOapg.properties.PayrunStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PayrunProcessDate"]) -> MetaOapg.properties.PayrunProcessDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PeriodStartDate"]) -> MetaOapg.properties.PeriodStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PeriodEndDate"]) -> MetaOapg.properties.PeriodEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ImpoundProcessDate"]) -> MetaOapg.properties.ImpoundProcessDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ImpoundReferenceId"]) -> MetaOapg.properties.ImpoundReferenceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ImpoundedAmount"]) -> MetaOapg.properties.ImpoundedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsClientActive"]) -> MetaOapg.properties.IsClientActive: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["LegalEntityId", "CheckDate", "PayImportId", "EmployeeId", "EmployeeNumber", "EmployeeName", "EmployeeStatus", "WasEmployeePaid", "ReceivedAmount", "PaidAmount", "ShortfallAmount", "PayrunStatus", "PayrunProcessDate", "PeriodStartDate", "PeriodEndDate", "ImpoundProcessDate", "ImpoundReferenceId", "ImpoundedAmount", "IsClientActive", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LegalEntityId"]) -> typing.Union[MetaOapg.properties.LegalEntityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CheckDate"]) -> typing.Union[MetaOapg.properties.CheckDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PayImportId"]) -> typing.Union[MetaOapg.properties.PayImportId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmployeeId"]) -> typing.Union[MetaOapg.properties.EmployeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmployeeNumber"]) -> typing.Union[MetaOapg.properties.EmployeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmployeeName"]) -> typing.Union[MetaOapg.properties.EmployeeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmployeeStatus"]) -> typing.Union['EmployeeStatusData2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["WasEmployeePaid"]) -> typing.Union[MetaOapg.properties.WasEmployeePaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReceivedAmount"]) -> typing.Union[MetaOapg.properties.ReceivedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaidAmount"]) -> typing.Union[MetaOapg.properties.PaidAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShortfallAmount"]) -> typing.Union[MetaOapg.properties.ShortfallAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PayrunStatus"]) -> typing.Union[MetaOapg.properties.PayrunStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PayrunProcessDate"]) -> typing.Union[MetaOapg.properties.PayrunProcessDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PeriodStartDate"]) -> typing.Union[MetaOapg.properties.PeriodStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PeriodEndDate"]) -> typing.Union[MetaOapg.properties.PeriodEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ImpoundProcessDate"]) -> typing.Union[MetaOapg.properties.ImpoundProcessDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ImpoundReferenceId"]) -> typing.Union[MetaOapg.properties.ImpoundReferenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ImpoundedAmount"]) -> typing.Union[MetaOapg.properties.ImpoundedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsClientActive"]) -> typing.Union[MetaOapg.properties.IsClientActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["LegalEntityId", "CheckDate", "PayImportId", "EmployeeId", "EmployeeNumber", "EmployeeName", "EmployeeStatus", "WasEmployeePaid", "ReceivedAmount", "PaidAmount", "ShortfallAmount", "PayrunStatus", "PayrunProcessDate", "PeriodStartDate", "PeriodEndDate", "ImpoundProcessDate", "ImpoundReferenceId", "ImpoundedAmount", "IsClientActive", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        LegalEntityId: typing.Union[MetaOapg.properties.LegalEntityId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CheckDate: typing.Union[MetaOapg.properties.CheckDate, str, datetime, schemas.Unset] = schemas.unset,
        PayImportId: typing.Union[MetaOapg.properties.PayImportId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        EmployeeId: typing.Union[MetaOapg.properties.EmployeeId, str, schemas.Unset] = schemas.unset,
        EmployeeNumber: typing.Union[MetaOapg.properties.EmployeeNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        EmployeeName: typing.Union[MetaOapg.properties.EmployeeName, None, str, schemas.Unset] = schemas.unset,
        EmployeeStatus: typing.Union['EmployeeStatusData2', schemas.Unset] = schemas.unset,
        WasEmployeePaid: typing.Union[MetaOapg.properties.WasEmployeePaid, bool, schemas.Unset] = schemas.unset,
        ReceivedAmount: typing.Union[MetaOapg.properties.ReceivedAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PaidAmount: typing.Union[MetaOapg.properties.PaidAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ShortfallAmount: typing.Union[MetaOapg.properties.ShortfallAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PayrunStatus: typing.Union[MetaOapg.properties.PayrunStatus, None, str, schemas.Unset] = schemas.unset,
        PayrunProcessDate: typing.Union[MetaOapg.properties.PayrunProcessDate, str, datetime, schemas.Unset] = schemas.unset,
        PeriodStartDate: typing.Union[MetaOapg.properties.PeriodStartDate, str, datetime, schemas.Unset] = schemas.unset,
        PeriodEndDate: typing.Union[MetaOapg.properties.PeriodEndDate, str, datetime, schemas.Unset] = schemas.unset,
        ImpoundProcessDate: typing.Union[MetaOapg.properties.ImpoundProcessDate, None, str, datetime, schemas.Unset] = schemas.unset,
        ImpoundReferenceId: typing.Union[MetaOapg.properties.ImpoundReferenceId, None, str, schemas.Unset] = schemas.unset,
        ImpoundedAmount: typing.Union[MetaOapg.properties.ImpoundedAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        IsClientActive: typing.Union[MetaOapg.properties.IsClientActive, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandPayDeductionInformation':
        return super().__new__(
            cls,
            *args,
            LegalEntityId=LegalEntityId,
            CheckDate=CheckDate,
            PayImportId=PayImportId,
            EmployeeId=EmployeeId,
            EmployeeNumber=EmployeeNumber,
            EmployeeName=EmployeeName,
            EmployeeStatus=EmployeeStatus,
            WasEmployeePaid=WasEmployeePaid,
            ReceivedAmount=ReceivedAmount,
            PaidAmount=PaidAmount,
            ShortfallAmount=ShortfallAmount,
            PayrunStatus=PayrunStatus,
            PayrunProcessDate=PayrunProcessDate,
            PeriodStartDate=PeriodStartDate,
            PeriodEndDate=PeriodEndDate,
            ImpoundProcessDate=ImpoundProcessDate,
            ImpoundReferenceId=ImpoundReferenceId,
            ImpoundedAmount=ImpoundedAmount,
            IsClientActive=IsClientActive,
            _configuration=_configuration,
            **kwargs,
        )

from paycor_python_sdk.model.employee_status_data2 import EmployeeStatusData2
