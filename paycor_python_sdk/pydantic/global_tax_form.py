# coding: utf-8

"""
    Paycor Public API

     Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from paycor_python_sdk.pydantic.filing_status import FilingStatus

class GlobalTaxForm(BaseModel):
    # Effective start date of withholding.
    effective_start_date: typing.Optional[typing.Optional[datetime]] = Field(None, alias='EffectiveStartDate')

    # Effective end date of withholding.
    effective_end_date: typing.Optional[typing.Optional[datetime]] = Field(None, alias='EffectiveEndDate')

    # Information whether global tax requires the Filing status.
    has_filing_status: typing.Optional[bool] = Field(None, alias='HasFilingStatus')

    # Information whether global tax requires the adjust witholding field.
    has_adjust_withholding: typing.Optional[bool] = Field(None, alias='HasAdjustWithholding')

    # Information whether global tax requires the override witholding date field.
    has_override_withholding_date: typing.Optional[bool] = Field(None, alias='HasOverrideWithholdingDate')

    # Information whether global tax requires the applicable birth year field.
    has_applicable_birth_year: typing.Optional[bool] = Field(None, alias='HasApplicableBirthYear')

    # Information whether global tax requires the amount field.
    has_amount: typing.Optional[bool] = Field(None, alias='HasAmount')

    # Information whether global tax requires the rate field.
    has_rate: typing.Optional[bool] = Field(None, alias='HasRate')

    # Information whether global tax requires exemption amount field.
    has_exemption_amount: typing.Optional[bool] = Field(None, alias='HasExemptionAmount')

    # Information whether global tax requires non resident alien field.
    has_non_resident_alien: typing.Optional[bool] = Field(None, alias='HasNonResidentAlien')

    # Information whether global tax requires the number of qualified dependents field.
    has_number_of_qualified_dependents: typing.Optional[bool] = Field(None, alias='HasNumberOfQualifiedDependents')

    # Information whether global tax requires the Number Of Other Dependents field.
    has_number_of_other_dependents: typing.Optional[bool] = Field(None, alias='HasNumberOfOtherDependents')

    # Information whether global tax requires the Number Of Exemptions field.
    has_number_of_exemptions: typing.Optional[bool] = Field(None, alias='HasNumberOfExemptions')

    # Information whether global tax requires the Spouse Working field.
    has_spouse_working: typing.Optional[bool] = Field(None, alias='HasSpouseWorking')

    # Information whether global tax requires the HasTwoIncomes field.
    has_two_incomes: typing.Optional[bool] = Field(None, alias='HasTwoIncomes')

    # Information whether global tax requires the AdditionalIncome field. Amount of employee's additional income as specified on employee's IRS Form W-4.
    has_additional_income: typing.Optional[bool] = Field(None, alias='HasAdditionalIncome')

    # Information whether global tax requires the Additional Deduction field.
    has_additional_deduction: typing.Optional[bool] = Field(None, alias='HasAdditionalDeduction')

    # Information whether global tax requires the Accuracy Confirmation field.
    has_accuracy_confirmation: typing.Optional[bool] = Field(None, alias='HasAccuracyConfirmation')

    # Information whether global tax requires the Qualified Dependent Credit field.
    has_qualified_dependent_credit: typing.Optional[bool] = Field(None, alias='HasQualifiedDependentCredit')

    # Information whether global tax requires the Other Dependent Credit field.
    has_other_dependent_credit: typing.Optional[bool] = Field(None, alias='HasOtherDependentCredit')

    # Information whether global tax requires Total Credits field.
    has_total_credits: typing.Optional[bool] = Field(None, alias='HasTotalCredits')

    # Information whether global tax requires Qualified Dependent Credit field.
    qualified_dependent_credit: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='QualifiedDependentCredit')

    # Information whether global tax requires Other Dependent Credit field.
    other_dependent_credit: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='OtherDependentCredit')

    # Enumeration of valid filing status values for this tax code.
    filing_statuses: typing.Optional[typing.Optional[typing.List[FilingStatus]]] = Field(None, alias='FilingStatuses')

    # Information whether global tax requires the Income Tax field.
    has_income_tax: typing.Optional[typing.Optional[str]] = Field(None, alias='HasIncomeTax')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
